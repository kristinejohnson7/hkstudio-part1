{"ast":null,"code":"import moment from \"moment\";\nexport const cardNumberValidation = cardNumber => {\n  if (!cardNumber) {\n    return \"Enter a valid card\";\n  }\n\n  const regexPattern = {\n    MASTERCARD: /^5[1-5][0-9]{1,}|^2[2-7][0-9]{1,}$/,\n    VISA: /^4[0-9]{2,}$/,\n    AMERICAN_EXPRESS: /^3[47][0-9]{5,}$/,\n    DISCOVER: /^6(?:011|5[0-9]{2})[0-9]{3,}$/\n  };\n\n  for (const card in regexPattern) {\n    if (cardNumber.replace(/[^\\d]/g, \"\").match(regexPattern[card])) {\n      if (cardNumber) {\n        return cardNumber && /^[1-6]{1}[0-9]{14,15}$/i.test(cardNumber.replace(/[^\\d]/g, \"\").trim()) ? \"\" : \"Enter a valid Card\";\n      }\n    }\n  }\n\n  return \"Enter a valid Card\";\n};\nexport const cardExpireValidation = value => {\n  if (!value) {\n    return \"Enter an expiry date\";\n  }\n\n  if (value) {\n    if (/^(0[1-9]|1[0-2])\\/[0-9]{2}$/i.test(value.trim())) {\n      let today = new Date();\n      const date = `${today.getFullYear()}-${today.getMonth() + 1}-${new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate()}`;\n      let currentDate = moment(new Date(date));\n      let visaValue = value.split(\"/\");\n      let visaDate = new Date(`20${visaValue[1]}`, visaValue[0], 0);\n      return currentDate < moment(visaDate) ? undefined : \"Please enter a valid date\";\n    } else {\n      return \"Invalid date format\";\n    }\n  }\n};\nexport const securityCodeValidation = (min, value) => value && value.length < min || !value ? \"Must be 3 characters or more\" : undefined;\nexport const onlyTextValidation = value => {\n  if (value) {\n    if (/^[a-zA-Z ]*$/i.test(value)) {\n      return undefined;\n    } else {\n      return \"Alphabetical letters only\";\n    }\n  } else {\n    return \"Enter a value\";\n  }\n};\nexport const onlyNumberValidation = value => {\n  if (value) {\n    const pattern = /^\\d*[.]?\\d*$/;\n\n    if (pattern.test(Number(value))) {\n      return undefined;\n    } else {\n      return \"Numerical values only\";\n    }\n  } else {\n    return \"Please enter a value\";\n  }\n};\nexport const passwordValidation = value => {\n  if (value) {\n    const pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$@!%&*?])[A-Za-z\\d#$@!%&*?]{8,30}$/;\n\n    if (pattern.test(value)) {\n      return undefined;\n    } else {\n      return \"Password must be a minimum of 8 characters. Minimum of 1 uppercase letter, 1 lowercase letter, 1 special character, and 1 number.\";\n    }\n  } else {\n    return \"Please enter a value\";\n  }\n};","map":{"version":3,"names":["moment","cardNumberValidation","cardNumber","regexPattern","MASTERCARD","VISA","AMERICAN_EXPRESS","DISCOVER","card","replace","match","test","trim","cardExpireValidation","value","today","Date","date","getFullYear","getMonth","getDate","currentDate","visaValue","split","visaDate","undefined","securityCodeValidation","min","length","onlyTextValidation","onlyNumberValidation","pattern","Number","passwordValidation"],"sources":["/Users/kristinejohnson/Documents/CODING/Projects/hkstudio/src/components/validations.js"],"sourcesContent":["import moment from \"moment\";\n\nexport const cardNumberValidation = (cardNumber) => {\n  if (!cardNumber) {\n    return \"Enter a valid card\";\n  }\n  const regexPattern = {\n    MASTERCARD: /^5[1-5][0-9]{1,}|^2[2-7][0-9]{1,}$/,\n    VISA: /^4[0-9]{2,}$/,\n    AMERICAN_EXPRESS: /^3[47][0-9]{5,}$/,\n    DISCOVER: /^6(?:011|5[0-9]{2})[0-9]{3,}$/,\n  };\n  for (const card in regexPattern) {\n    if (cardNumber.replace(/[^\\d]/g, \"\").match(regexPattern[card])) {\n      if (cardNumber) {\n        return cardNumber &&\n          /^[1-6]{1}[0-9]{14,15}$/i.test(\n            cardNumber.replace(/[^\\d]/g, \"\").trim()\n          )\n          ? \"\"\n          : \"Enter a valid Card\";\n      }\n    }\n  }\n  return \"Enter a valid Card\";\n};\n\nexport const cardExpireValidation = (value) => {\n  if (!value) {\n    return \"Enter an expiry date\";\n  }\n  if (value) {\n    if (/^(0[1-9]|1[0-2])\\/[0-9]{2}$/i.test(value.trim())) {\n      let today = new Date();\n      const date = `${today.getFullYear()}-${today.getMonth() + 1}-${new Date(\n        today.getFullYear(),\n        today.getMonth() + 1,\n        0\n      ).getDate()}`;\n      let currentDate = moment(new Date(date));\n      let visaValue = value.split(\"/\");\n      let visaDate = new Date(`20${visaValue[1]}`, visaValue[0], 0);\n      return currentDate < moment(visaDate)\n        ? undefined\n        : \"Please enter a valid date\";\n    } else {\n      return \"Invalid date format\";\n    }\n  }\n};\n\nexport const securityCodeValidation = (min, value) =>\n  (value && value.length < min) || !value\n    ? \"Must be 3 characters or more\"\n    : undefined;\n\nexport const onlyTextValidation = (value) => {\n  if (value) {\n    if (/^[a-zA-Z ]*$/i.test(value)) {\n      return undefined;\n    } else {\n      return \"Alphabetical letters only\";\n    }\n  } else {\n    return \"Enter a value\";\n  }\n};\n\nexport const onlyNumberValidation = (value) => {\n  if (value) {\n    const pattern = /^\\d*[.]?\\d*$/;\n    if (pattern.test(Number(value))) {\n      return undefined;\n    } else {\n      return \"Numerical values only\";\n    }\n  } else {\n    return \"Please enter a value\";\n  }\n};\n\nexport const passwordValidation = (value) => {\n  if (value) {\n    const pattern =\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$@!%&*?])[A-Za-z\\d#$@!%&*?]{8,30}$/;\n    if (pattern.test(value)) {\n      return undefined;\n    } else {\n      return \"Password must be a minimum of 8 characters. Minimum of 1 uppercase letter, 1 lowercase letter, 1 special character, and 1 number.\";\n    }\n  } else {\n    return \"Please enter a value\";\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}